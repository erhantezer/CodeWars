// 5kyu - Simple Fun #389 - The Order of Ribbons

// Task

// Here are 10 ribbons. The length of each ribbon is 11 units with a unique pattern (number 0-9). Now let's put these ribbons on a 11x11 table. Every time a ribbon is placed, horizontal or vertical. The next ribbon and the last one are in different directions, and ensure that any two ribbons are not completely overlapped.
// Note

//     All inputs are valid.

//     The first ribbon can be placed either horizontally or vertically.

// For example:

// An empty 11x11 table:

// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........

// We put a ribbon with pattern 1 on the table:

// ...........
// 11111111111
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........

// Then, put a ribbon with pattern 2 on the table:

// .2.........
// 12111111111
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........

// Note that their intersection will be covered with the ribbon above.

// Then, continue to put other ribbons..

// Finally, we get a pattern like the following:

// 62.0.4..8..
// 62101411811
// 62.0.4..8..
// 65505555855
// 63303433833
// 62.0.4..8..
// 77707777877
// 62.0.4..8..
// 99909999999
// 62.0.4..8..
// 62.0.4..8..

// Given the final pattern ribbons, your task is to return the order of these ribbons(from the bottom to the top). For the example above, should return "1234567890".

// Notice that not all the ribbons will be placed on the table, but at least 1 ribbon.

// Still not understand the task? Look at the following example ;-)
// Examples

// For ribbons =

// ...........
// 11111111111
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........
// ...........

// the output should be "1".

// For ribbons =

// .2.........
// 12111111111
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........

// the output should be "12".

// For ribbons =

// .2.........
// 12111111111
// .2.........
// .2.........
// 33333333333
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........
// .2.........

// the output should be "123".

// For ribbons =

// .2...4.....
// 12111411111
// .2...4.....
// .2...4.....
// 33333433333
// .2...4.....
// .2...4.....
// .2...4.....
// .2...4.....
// .2...4.....
// .2...4.....

// the output should be "1234".

// For ribbons =

// 62.0.4..8..
// 62101411811
// 62.0.4..8..
// 65505555855
// 63303433833
// 62.0.4..8..
// 77707777877
// 62.0.4..8..
// 99909999999
// 62.0.4..8..
// 62.0.4..8..

// the output should be "1234567890".

function theOrderOf(ribbons){
  let str = "", arr = ribbons.split("\n").map(row => row.split(""));
  while(arr.length) {
    arr = arr[0].map((col, i) => arr.map(row => row[i]));
    for(const [i, row] of arr.entries()) {
      let x = row.reduce((a,b) => a === b ? a : null);
      if(x && row.length > 1) {
        str += x !== '.' ? x : '';
        arr.splice(i, 1);
        break;
      }
    }
  }
  return str.split("").reverse().join("");
}

